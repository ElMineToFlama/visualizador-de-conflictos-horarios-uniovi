package visualizadoruniovi;

import java.awt.Dimension;
import java.io.IOException;
import java.util.Scanner;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.pdfbox.pdmodel.PDDocument;
import technology.tabula.ObjectExtractor;
import technology.tabula.Table;
import technology.tabula.extractors.BasicExtractionAlgorithm;
import technology.tabula.Page;
import technology.tabula.RectangularTextContainer;

/**
 * @author Saulete
 */
public class Visualizador extends javax.swing.JFrame {

    private Calendario calendario;
    private JFileChooser DFichero;
    private List<List<Horario>> listaHorarios;
    private SelectorGrupos vGrupos;
    
    public Visualizador()
    {
        initComponents();
        
        String[][] data = { {"09:00", "", "", "", "", ""},
                            {"10:00", "", "", "", "", ""},
                            {"11:00", "", "", "", "", ""},
                            {"12:00", "", "", "", "", ""},
                            {"13:00", "", "", "", "", ""},
                            {"14:00", "", "", "", "", ""},
                            {"15:00", "", "", "", "", ""},
                            {"16:00", "", "", "", "", ""},
                            {"17:00", "", "", "", "", ""},
                            {"18:00", "", "", "", "", ""},
                            {"19:00", "", "", "", "", ""}};
        String[] columnNames = {"", "Lunes --", "Martes --", "Miércoles --", "Jueves --", "Viernes --"};
        tCalendario.setModel(new MyTableModel(tCalendario, data, columnNames));
        tCalendario.setDefaultRenderer(Object.class, new MultiLineCellRenderer());
        tCalendario.setShowHorizontalLines(true);
        tCalendario.setShowVerticalLines(true);
        ((DefaultTableCellRenderer)(tCalendario.getTableHeader().getDefaultRenderer())).setHorizontalAlignment(SwingConstants.CENTER);
        
        this.calendario = new Calendario();
        this.calendario.actualizarCabeceras(tCalendario, lMes);
        Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
        
        DFichero = new JFileChooser();
        this.listaHorarios = new ArrayList<>();
        this.listArchivos.setModel(new javax.swing.DefaultListModel());
        this.vGrupos = new SelectorGrupos();
        
        this.tCalendario.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.tCalendario.setMinimumSize(this.tCalendario.getSize());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bIzquierda = new javax.swing.JButton();
        bDerecha = new javax.swing.JButton();
        scCalendario = new javax.swing.JScrollPane();
        tCalendario = new javax.swing.JTable();
        lMes = new javax.swing.JLabel();
        bAdd = new javax.swing.JButton();
        bRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listArchivos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        bDetectarConflictos = new javax.swing.JButton();
        bElegirGrupos = new javax.swing.JButton();
        cbFiltrarGrupos = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualizador de horarios");
        setPreferredSize(new java.awt.Dimension(1089, 311));

        bIzquierda.setText("<");
        bIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIzquierdaActionPerformed(evt);
            }
        });

        bDerecha.setText(">");
        bDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDerechaActionPerformed(evt);
            }
        });

        scCalendario.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scCalendario.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scCalendario.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scCalendarioComponentResized(evt);
            }
        });

        tCalendario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"09:00", null, null, null, null, null},
                {"10:00", null, null, null, null, null},
                {"11:00", null, null, null, null, null},
                {"12:00", null, null, null, null, null},
                {"13:00", null, null, null, null, null},
                {"14:00", null, null, null, null, null},
                {"15:00", null, null, null, null, null},
                {"16:00", null, null, null, null, null},
                {"17:00", null, null, null, null, null},
                {"18:00", null, null, null, null, null},
                {"19:00", null, null, null, null, null}
            },
            new String [] {
                "", "Lunes --", "Martes --", "Miércoles --", "Jueves --", "Viernes --"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tCalendario.getTableHeader().setReorderingAllowed(false);
        scCalendario.setViewportView(tCalendario);

        lMes.setText("<Mes> de <Año>");

        bAdd.setText("Añadir");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        bRemove.setText("Borrar");
        bRemove.setEnabled(false);
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listArchivos);

        jLabel1.setText("Lista de PDF cargados");

        bDetectarConflictos.setText("Detectar conflictos");
        bDetectarConflictos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDetectarConflictosActionPerformed(evt);
            }
        });

        bElegirGrupos.setText("Elegir grupos");
        bElegirGrupos.setEnabled(false);
        bElegirGrupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bElegirGruposActionPerformed(evt);
            }
        });

        cbFiltrarGrupos.setText("Filtrar grupos");
        cbFiltrarGrupos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFiltrarGruposItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bIzquierda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lMes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bDerecha))
                    .addComponent(scCalendario, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(48, 48, 48))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bElegirGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbFiltrarGrupos)))
                    .addComponent(bDetectarConflictos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDerecha)
                    .addComponent(bIzquierda)
                    .addComponent(lMes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scCalendario, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bRemove)
                            .addComponent(bAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bElegirGrupos)
                            .addComponent(cbFiltrarGrupos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bDetectarConflictos)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveActionPerformed
        int ind = this.listArchivos.getSelectedIndex();
        
        if (ind != -1)
        {
            int ret = JOptionPane.showConfirmDialog(null, "¿Estás seguro de querer borrar el elemento seleccionado?", "Confirmar borrado", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (ret == JOptionPane.YES_OPTION)
            {
                javax.swing.DefaultListModel modelo = ((javax.swing.DefaultListModel)(this.listArchivos.getModel()));
                
                modelo.remove(ind);
                this.listaHorarios.remove(ind);
                this.vGrupos.actualizarVentana(this.listaHorarios, this.tCalendario, this.cbFiltrarGrupos, this.scCalendario, true);
                
                Utilidades.limpiarTabla(tCalendario);
                Utilidades.actualizarDatosTabla(tCalendario, listaHorarios, this.vGrupos.getAsignaturas(), this.vGrupos.getCheckboxes(), this.cbFiltrarGrupos.isSelected());
                Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
                
                if (modelo.size() == 0) this.bRemove.setEnabled(false);
            }
        }
    }//GEN-LAST:event_bRemoveActionPerformed

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        int ret = DFichero.showOpenDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION)
        {
            PDDocument pd = null;
            ObjectExtractor oe = null;
            Scanner input = null;
            try
            {
                String horarioSinProcesar = ""; // Tabla del horario sin procesar
                String comienzoSinProcesar = ""; // Tercera página donde se encuentra el comienzo de las clases
                
                String ruta = DFichero.getSelectedFile().getAbsolutePath();
                if (!ruta.substring(ruta.length() - 4, ruta.length()).equals(".pdf")) throw new IOException("El archivo especificado no es un PDF");
                pd = PDDocument.load(new File(ruta));

                oe = new ObjectExtractor(pd);
                BasicExtractionAlgorithm bea = new BasicExtractionAlgorithm(); // Algoritmo de extracción básico, el de Spreadsheet no funcionaba bien
                Page page = oe.extract(1); // La tabla del horario está en la primera página

		List<Table> table = bea.extract(page);
		for(Table tables: table)
                {
                    List<List<RectangularTextContainer>> rows = tables.getRows();
                    for(int i = 0; i < rows.size(); i++) // Por cada fila...
                    {
                        List<RectangularTextContainer> cells = rows.get(i);
                        for(int j = 0; j < cells.size(); j++) // Por cada columna...
                        {
                            horarioSinProcesar += cells.get(j).getText().replace("\r", " ")+"|";
                        }
                        horarioSinProcesar += "\n";
                    }
		}
                
                page = oe.extract(3); // El comienzo de las clases está en la tercera página

		table = bea.extract(page);
		for(Table tables: table)
                {
                    List<List<RectangularTextContainer>> rows = tables.getRows();
                    for(int i = 0; i < rows.size(); i++) // Por cada fila...
                    {
                        List<RectangularTextContainer> cells = rows.get(i);
                        for(int j = 0; j < cells.size(); j++) // Por cada columna...
                        {
                            comienzoSinProcesar += cells.get(j).getText().replace("\r", " ")+"|";
                        }
                        comienzoSinProcesar += "\n";
                    }
		}
                
                oe.close();
                pd.close();
                //System.out.println(horarioSinProcesar);
                //System.out.println(comienzoSinProcesar);
                
                // Ahora que tenemos todos los datos sin procesar, comenzamos procesando el día que da comienzo las clases
                boolean encontrado = false;
                int aciertos = 0;
                input = new Scanner(comienzoSinProcesar);
                while (!encontrado && input.hasNext())
                {
                    if (aciertos == 0 && input.next().equals("1comie2n2zo")) aciertos++;
                    else if (aciertos == 1 && input.next().equals("del")) aciertos++;
                    else if (aciertos == 2 && input.next().equals("prim34er")) aciertos++;
                    else if (aciertos == 3 && input.next().equals("cuatrimestre")) encontrado = true;
                    else aciertos = 0;
                }
                if (!encontrado) throw new IOException("El PDF proporcionado no contiene los datos necesarios");
                
                List<Horario> lista = new ArrayList<>();
                
                // Si detectamos "comienzo del primer cuatrimestre", entonces después irá "será el día <Día> de <Mes> de <Año>"
                for (int i = 0; i < 3; i++) input.next(); // Saltamos los textos innecesarios

                int dia = input.nextInt();
                input.next();
                String mes = Utilidades.removeNumbersFromString(input.next());
                input.next();
                int year = input.nextInt();
                input.close();
                
                Calendario cal = new Calendario();
                cal.setFecha(dia, mes, year);
                cal.moverAlLunes(); // A partir de aquí, el tiempo está establecido en el lunes de la primera semana de clase
                System.out.println(cal.getCalendario().getTime());
                input = new Scanner(horarioSinProcesar);
                input.useDelimiter("\s|\r\n|\\|");
                for (int i = 0; i < 3; i++) input.nextLine();
                String[] linea;
                Horario horario;
                
                List<String[]> horariosPostProcesado = new ArrayList<>(); // Aquí van los horarios que tengan como semanas "TODAS"
                List<Integer> listaSemanas = new ArrayList<>(); // Para saber qué semanas son "TODAS", es necesario guardar aquellas semanas en las que exista clase
                
                while (input.hasNext()) // Para todo el calendario...
                {
                    int ind = 0;
                    int diaSemana = 1;
                    linea = input.nextLine().split("\s|\\|");
                    for (int i = 0; i < linea.length; i++) System.out.printf("/%s/ ", linea[i]);
                    System.out.printf("\n");
                    int hora = Integer.parseInt(linea[ind++].substring(0, 2));
                    while (ind < linea.length) // Por cada línea...
                    {
                        while (linea[ind].equals("")) // Comprobación de horario vacío el lunes
                        {
                            // Aquí pasa algo curioso y es que a veces el calendario tiene cuatro espacios en blanco por celda vacía y otras veces tiene tres. Esto
                            // produce un problema y es que nunca sabremos con eficiencia si se está usando tres o cuatro espacios por lo que se comprobarán ambos
                            // casos, teniendo prioridad el de cuatro espacios.
                            if (linea[ind+1].equals("") && linea[ind+2].equals("") && linea[ind+3].equals(""))
                            {
                                ind += 4;
                                diaSemana++;
                            }
                            else if (linea[ind+1].equals("") && linea[ind+2].equals(""))
                            {
                                ind += 3;
                                diaSemana++;
                            }
                            else ind++;
                        }
                        String asignatura = linea[ind++];
                        while (linea[ind].equals("")) ind++;
                        String grupo = linea[ind++];
                        while (linea[ind].equals("")) ind++;
                        String aula = linea[ind++];
                        while (linea[ind].equals("")) ind++;
                        String[] semanas = linea[ind++].split(",");
                        if (semanas.length == 1 && semanas[0].equals("TODAS")) // Procesar las semanas sin son "TODAS"
                        {
                            String[] info = new String [5];
                            info[0] = asignatura;
                            info[1] = grupo;
                            info[2] = aula;
                            info[3] = Integer.toString(hora);
                            info[4] = Integer.toString(diaSemana);
                            horariosPostProcesado.add(info);
                        }
                        else // Procesar las semanas si están especificadas
                        {
                            for (int i = 0; i < semanas.length; i++)
                            {
                                int numSemana = Integer.parseInt(semanas[i]);
                                if (!listaSemanas.contains(numSemana)) listaSemanas.add(numSemana);
                                cal.getCalendario().add(Calendar.DATE, (numSemana-1) * 7 + diaSemana - 1); // Avanzamos semana-1 semanas en el calendario y diaDeLaSemana-1
                                // Es importante lo de diaDeLaSemana-1 porque tenemos un horario con semanas 3,4,5 y estamos en el martes, al resetear el calendario
                                // para calcular la siguiente semana, tenemos que moverlo a lunes de nuevo (ya que resetear lo devuelve al estado inicial, no anterior)
                                // y desplazar el calendario al día de la semana en la que estamos (en este ejemplo, martes)

                                dia = cal.getCalendario().get(Calendar.DATE);
                                int numMes = cal.getCalendario().get(Calendar.MONTH) + 1;
                                year = cal.getCalendario().get(Calendar.YEAR);

                                horario = new Horario(asignatura, grupo, aula, hora, dia, numMes, year);
                                lista.add(horario);
                                
                                cal.resetCalendario();
                                cal.moverAlLunes();
                            }
                        }
                        
                        if (ind < linea.length) // Comprobación de horario vacío del martes al viernes
                        {
                            while (linea[ind].equals(""))
                            {
                                /* Explicación de este algoritmo en su código duplicado */
                                if (linea[ind+1].equals("") && linea[ind+2].equals("") && linea[ind+3].equals(""))
                                {
                                    ind += 4;
                                    diaSemana++;
                                }
                                else if (linea[ind+1].equals("") && linea[ind+2].equals(""))
                                {
                                    ind += 3;
                                    diaSemana++;
                                }
                                else ind++;
                            }
                        }
                        diaSemana++;
                    }
                }
                
                for (String[] postProcesado : horariosPostProcesado) // Cuando terminemos de procesar los horarios calculables, continuamos con los horarios que se dan todas las semanas existentes
                {
                    for (Integer numSemana : listaSemanas) // Por cada semana...
                    {
                        cal.getCalendario().add(Calendar.DATE, (numSemana-1) * 7 + Integer.parseInt(postProcesado[4]) - 1);

                        dia = cal.getCalendario().get(Calendar.DATE);
                        int numMes = cal.getCalendario().get(Calendar.MONTH) + 1;
                        year = cal.getCalendario().get(Calendar.YEAR);

                        horario = new Horario(postProcesado[0], postProcesado[1], postProcesado[2], Integer.parseInt(postProcesado[3]), dia, numMes, year);
                        lista.add(horario);

                        cal.resetCalendario();
                        cal.moverAlLunes();
                    }
                }
                
                this.listaHorarios.add(lista);
                this.vGrupos.actualizarVentana(this.listaHorarios, this.tCalendario, this.cbFiltrarGrupos, this.scCalendario, true);
                
                Utilidades.limpiarTabla(tCalendario);
                Utilidades.actualizarDatosTabla(tCalendario, listaHorarios, this.vGrupos.getAsignaturas(), this.vGrupos.getCheckboxes(), this.cbFiltrarGrupos.isSelected());
                Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
                //System.out.println(this.listaHorarios);
                
                ((javax.swing.DefaultListModel)(this.listArchivos.getModel())).addElement(DFichero.getSelectedFile().getName());
                this.bRemove.setEnabled(true);
            }
            catch (IOException | ParseException e)
            {
                System.err.println(e.getMessage());
                if (pd != null) try { pd.close(); } catch (IOException ex) { System.err.println(ex.getMessage()); }
                if (oe != null) try { oe.close(); } catch (IOException ex) { System.err.println(ex.getMessage()); }
            }
        }
    }//GEN-LAST:event_bAddActionPerformed

    private void bDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDerechaActionPerformed
        //this.tCalendario.setValueAt("Hola\nAdios", 2, 2);
        //Utilidades.actualizarSizeTabla(this.tCalendario);
        this.calendario.avanzarSemanas(1);
        this.calendario.actualizarCabeceras(tCalendario, lMes);
        Utilidades.limpiarTabla(tCalendario);
        Utilidades.actualizarDatosTabla(tCalendario, listaHorarios, this.vGrupos.getAsignaturas(), this.vGrupos.getCheckboxes(), this.cbFiltrarGrupos.isSelected());
        Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
    }//GEN-LAST:event_bDerechaActionPerformed

    private void bIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIzquierdaActionPerformed
        this.calendario.avanzarSemanas(-1);
        this.calendario.actualizarCabeceras(tCalendario, lMes);
        Utilidades.limpiarTabla(tCalendario);
        Utilidades.actualizarDatosTabla(tCalendario, listaHorarios, this.vGrupos.getAsignaturas(), this.vGrupos.getCheckboxes(), this.cbFiltrarGrupos.isSelected());
        Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
    }//GEN-LAST:event_bIzquierdaActionPerformed

    private void bDetectarConflictosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDetectarConflictosActionPerformed
        /* Pasos para detectar conflictos:
        1. Saber el primer día en el que aparecen horarios
        2. Saber el último día en el que aparecen horarios
        3. Posicionarse en el primer día
        4. Ir semana por semana revisando todas las celdas, si hay mínimo un "\n" entonces hay conflicto
        5. Hay que recorrer el calendario hasta que se llegue al último día de clase
        6. El resultado de los conflictos se muestra en un diálogo de texto
        */
        
        Date fechaInicio = new Date();
        Date fechaFin = new Date();
        Date f = null; // Variable para asignar al horario
        SimpleDateFormat sdf = new SimpleDateFormat("dd-LL-yyyy");
        for (List<Horario> lista : listaHorarios)
        {
            for (Horario hor : lista)
            {
                try { f = sdf.parse(hor.getDia() + "-" + hor.getMes() + "-" + hor.getYear()); } catch (ParseException ex) { System.err.println(ex.getMessage()); }
                if (f.before(fechaInicio)) fechaInicio = f;
                else if (f.after(fechaFin)) fechaFin = f;
            }
        }
        
        fechaInicio.setTime(fechaInicio.getTime() - 7*24*60*60*1000); // Le quitamos una semana para que detecte también la semana inicial (aunque aquí no haga falta)
        while (this.calendario.getCalendario().getTime().after(fechaInicio)) // Ir al principio
        {
            this.bIzquierdaActionPerformed(evt);
        }
        
        String resultado = "";
        int numConflictos = 0;
        fechaFin.setTime(fechaFin.getTime() + 7*24*60*60*1000); // Le añadimos una semana más (el método before() no es inclusivo por lo que puede no analizar la última semana)
        while (this.calendario.getCalendario().getTime().before(fechaFin)) // Llegar hasta el final
        {
            for (int i = 0; i < 11; i++)
            {
                for (int j = 1; j < 6; j++)
                {
                    if (Utilidades.countSubstringOccurrences(this.tCalendario.getValueAt(i, j).toString(), "\n") > 0)
                    {
                        resultado += this.tCalendario.getValueAt(i, 0).toString() + " " + this.tCalendario.getColumnName(j) + " de " + this.lMes.getText() + "\n";
                        resultado += this.tCalendario.getValueAt(i, j).toString() + "\n\n";
                        numConflictos++;
                    }
                }
            }
            System.out.println(this.calendario.getCalendario().getTime());
            this.bDerechaActionPerformed(evt);
        }
        JTextArea textArea = new JTextArea("Insert your Text here");
        JScrollPane scrollPane = new JScrollPane(textArea);  
        textArea.setLineWrap(true);  
        textArea.setWrapStyleWord(true); 
        textArea.setText(numConflictos == 0 ? "No se han encontrado conflictos, todo está en orden" : "Se han detectado " + numConflictos + " conflictos:\n\n" + resultado);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, "Resultados de conflictos horarios: " + numConflictos + " conflictos", JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_bDetectarConflictosActionPerformed

    private void bElegirGruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bElegirGruposActionPerformed
        this.vGrupos.actualizarVentana(this.listaHorarios, this.tCalendario, this.cbFiltrarGrupos, this.scCalendario, false);
        this.vGrupos.setVisible(true);
    }//GEN-LAST:event_bElegirGruposActionPerformed

    private void cbFiltrarGruposItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFiltrarGruposItemStateChanged
        this.bElegirGrupos.setEnabled(this.cbFiltrarGrupos.isSelected());
        Utilidades.limpiarTabla(tCalendario);
        Utilidades.actualizarDatosTabla(tCalendario, listaHorarios, this.vGrupos.getAsignaturas(), this.vGrupos.getCheckboxes(), this.cbFiltrarGrupos.isSelected());
        Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
    }//GEN-LAST:event_cbFiltrarGruposItemStateChanged

    private void scCalendarioComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scCalendarioComponentResized
        Utilidades.actualizarSizeTabla(this.tCalendario, this.scCalendario);
    }//GEN-LAST:event_scCalendarioComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visualizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bDerecha;
    private javax.swing.JButton bDetectarConflictos;
    private javax.swing.JButton bElegirGrupos;
    private javax.swing.JButton bIzquierda;
    private javax.swing.JButton bRemove;
    private javax.swing.JCheckBox cbFiltrarGrupos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lMes;
    private javax.swing.JList<String> listArchivos;
    private javax.swing.JScrollPane scCalendario;
    private javax.swing.JTable tCalendario;
    // End of variables declaration//GEN-END:variables
}
